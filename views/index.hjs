<!DOCTYPE html>
<html>
  <head>
    <title>{{ title }}</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <h1>{{ title }}</h1>
    <p>Welcome to {{ title }}</p>
    <p id="words1"></p>
    <p id="words2"></p>
    <p id="words3"></p>
    
    <script src='http://www.softsynth.com/webaudio/webaudio_tools.js'></script>
    <script>
      // Example showing how to produce a tone using Web Audio API.
      // Load the file webaudio_tools.js before loading this file.
      // This code will write to a DIV with an id="soundStatus".
      var oscillator;
      var amp;

      // Create an oscillator and an amplifier.
      function initAudio()
      {
          // Use audioContext from webaudio_tools.js
          if( audioContext )
          {
              oscillator = audioContext.createOscillator();
              fixOscillator(oscillator);
              oscillator.frequency.value = 440;
              amp = audioContext.createGain();
              amp.gain.value = 0;
          
              // Connect oscillator to amp and amp to the mixer of the audioContext.
              // This is like connecting cables between jacks on a modular synth.
              oscillator.connect(amp);
              amp.connect(audioContext.destination);
              oscillator.start(0);
              writeMessageToID( "soundStatus", "<p>Audio initialized.</p>");
          }
      }

      // Set the frequency of the oscillator and start it running.
      function tone( _frequency, _time )
      {
          var now = audioContext.currentTime;
          
          oscillator.frequency.setValueAtTime(_frequency, now);
          
          // Ramp up the gain so we can hear the sound.
          // We can ramp smoothly to the desired value.
          // First we should cancel any previous scheduled events that might interfere.
          amp.gain.cancelScheduledValues(now);
          // Anchor beginning of ramp at current value.
          amp.gain.setValueAtTime(amp.gain.value, now);
          amp.gain.linearRampToValueAtTime(0.5, audioContext.currentTime + 0.0);

          amp.gain.setValueAtTime(amp.gain.value, now + _time);
          amp.gain.linearRampToValueAtTime(0.0, audioContext.currentTime + 0.0 + _time);
          
          //writeMessageToID( "soundStatus", "<p>Play tone at frequency = " + _frequency  + "</p>");
      }

      function stopTone()
      {
          var now = audioContext.currentTime;
          amp.gain.cancelScheduledValues(now);
          amp.gain.setValueAtTime(amp.gain.value, now);
          amp.gain.linearRampToValueAtTime(0.0, audioContext.currentTime + 1.0);
          writeMessageToID( "soundStatus", "<p>Stop tone.</p>");
      }
    </script>

    <script>
      var words = [ "{{word1}}", "{{word2}}", "{{word3}}" ]

      function wordCrawl(_index, _word, _htmlID, _timestep)
      {
        if(_index < _word.length)
        {
          var stringStep = 1;
          if(_word.substring(_index + 1, _index + 3) === '&#')
          {
            stringStep += 4;
          }
          setTimeout(function()
          {
            wordCrawl(_index + stringStep, _word, _htmlID, _timestep)
          }, _timestep);
        }

          tone(800, _timestep * 0.3 * 0.001);
        
        document.getElementById(_htmlID).innerHTML = _word.substring(0, _index);

        return;
      }

      initAudio();

      setTimeout(function() {

        tone(800, 0.1);
        document.getElementById("words1").innerHTML = words[0];
        
        setTimeout(function() {
          wordCrawl(0, words[1], "words2", 150);
          //document.getElementById("words2").innerHTML = words[1];

          setTimeout(function() {
            wordCrawl(0, words[2], "words3", 80);
            //document.getElementById("words3").innerHTML = words[2];
          }, 5000);

        }, 2000);

      }, 6000);
    </script>
  </body>
</html>